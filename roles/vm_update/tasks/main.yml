- name: Auths to the cluster
  uri:
    url: '{{ api_url_v2 }}/clusters'
    method: GET
    validate_certs: false
    force_basic_auth: true
    body_format: json
    user: "{{ prism_user }}"
    password: "{{ prism_password }}"
    status_code: 200
    return_content: true
  register: login
  delegate_to: localhost

- name: Sets fact for session cookie
  set_fact:
    session_cookie: "{{ login.set_cookie }}"

- name: Gets a list of all VMs
  uri:
    url: "{{ api_url_v2 }}/vms/"
    method: GET
    validate_certs: false
    status_code: 200
    headers:
      Cookie: "{{ session_cookie }}"
  register: vms_list
  delegate_to: localhost

- name: Gets VM UUID from its name
  set_fact:
    vm_uuid: '{{ vms_list.json.entities | json_query(my_query)|first }}'
  vars:
    my_query: "[? name=='{{ inventory_hostname }}'].uuid"

- name: Gets current VM settings
  uri:
    url: '{{ api_url_v2 }}/vms/{{ vm_uuid }}?include_vm_disk_config=false&include_vm_nic_config=false'
    method: GET
    validate_certs: false
    status_code: 200
    headers:
      Cookie: "{{ session_cookie }}"
  register: current_vm_settings

- name: Updates RAM setting
  block:
    - name: Updates RAM setting
      uri:
        url: '{{ api_url_v2 }}/vms/{{ vm_uuid }}'
        method: PUT
        body_format: json
        body:
          memory_mb: '{{ vm_ram*1024Â }}'
        validate_certs: false
        headers:
          Cookie: "{{ session_cookie }}"
        status_code: 200
      delegate_to: localhost
      register: task_ram

    - name: Waits till RAM task has ended
      uri:
        url: '{{ api_url_v2 }}/tasks/{{ task_ram.json.task_uuid }}'
        method: GET
        validate_certs: false
        headers:
          Cookie: "{{ session_cookie }}"
        return_content: true
      register: task_status
      delegate_to: localhost
      retries: 20
      delay: 5
      until: task_status.json.progress_status == "Succeeded"
  when: current_vm_settings.json.memory_mb != vm_ram*1024

- name: Updates CPU setting
  block:
    - name: Updates CPU setting
      uri:
        url: '{{ api_url_v2 }}/vms/{{ vm_uuid }}'
        method: PUT
        body_format: json
        body:
          num_vcpus: '{{ vm_cpu }}'
        validate_certs: false
        headers:
          Cookie: "{{ session_cookie }}"
        status_code: 200
      delegate_to: localhost
      register: task_cpu

    - name: Waits till CPU task has ended
      uri:
        url: '{{ api_url_v2 }}/tasks/{{ task_cpu.json.task_uuid }}'
        method: GET
        validate_certs: false
        headers:
          Cookie: "{{ session_cookie }}"
        return_content: true
      register: task_status
      delegate_to: localhost
      retries: 20
      delay: 5
      until: task_status.json.progress_status == "Succeeded"
  when: current_vm_settings.json.num_vcpus != vm_cpu
